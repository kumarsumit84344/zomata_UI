{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nlet CartComponent = class CartComponent {\n  constructor(service) {\n    this.service = service;\n    this.dishes = [];\n    this.showbtn = false;\n    this.checklist = [];\n    this.total = 0;\n    this.firstForm = new FormGroup({\n      address: new FormControl('', Validators.required),\n      address2: new FormControl('', Validators.required),\n      city: new FormControl('', Validators.required),\n      state: new FormControl('', Validators.required),\n      postalCode: new FormControl('', Validators.required)\n    });\n    this.secondForm = new FormGroup({\n      address: new FormControl('', Validators.required)\n    });\n  }\n  ngOnInit() {\n    const dishesData = localStorage.getItem('Dishes');\n    this.service.itemlist.forEach(obj => {\n      this.checklist.push(JSON.stringify(obj));\n    });\n    if (dishesData !== null) {\n      this.dishes = JSON.parse(dishesData);\n      this.dis_len = this.dishes.length;\n    }\n    if (this.dis_len > 0) {\n      this.showbtn = true;\n    }\n    this.resturant = localStorage.getItem('resturant');\n  }\n  onSubmit() {\n    console.log(this.firstForm.value);\n  }\n  des(item) {\n    item.qty -= 1;\n    localStorage.setItem('Dishes', JSON.stringify(item));\n    if (item.qty == 0) {\n      localStorage.removeItem('Dishes');\n    }\n  }\n  incr(item) {\n    item.qty += 1;\n    localStorage.setItem('Dishes', JSON.stringify(item));\n  }\n};\nCartComponent = __decorate([Component({\n  selector: 'app-cart',\n  templateUrl: './cart.component.html',\n  styleUrls: ['./cart.component.css']\n})], CartComponent);\nexport { CartComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAEzC,SAASC,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAQ,gBAAgB;AAO5D,IAAMC,aAAa,GAAnB,MAAMA,aAAa;EAGxBC,YAAoBC,OAAyB;IAAzB,YAAO,GAAPA,OAAO;IAY3B,WAAM,GAAU,EAAE;IAElB,YAAO,GAAY,KAAK;IAGxB,cAAS,GAAU,EAAE;IACrB,UAAK,GAAG,CAAC;IAjBP,IAAI,CAACC,SAAS,GAAG,IAAIL,SAAS,CAAC;MAC7BM,OAAO,EAAE,IAAIP,WAAW,CAAC,EAAE,EAAEE,UAAU,CAACM,QAAQ,CAAC;MACjDC,QAAQ,EAAE,IAAIT,WAAW,CAAC,EAAE,EAAEE,UAAU,CAACM,QAAQ,CAAC;MAClDE,IAAI,EAAE,IAAIV,WAAW,CAAC,EAAE,EAAEE,UAAU,CAACM,QAAQ,CAAC;MAC9CG,KAAK,EAAE,IAAIX,WAAW,CAAC,EAAE,EAAEE,UAAU,CAACM,QAAQ,CAAC;MAC/CI,UAAU,EAAE,IAAIZ,WAAW,CAAC,EAAE,EAAEE,UAAU,CAACM,QAAQ;KACpD,CAAC;IACF,IAAI,CAACK,UAAU,GAAG,IAAIZ,SAAS,CAAC;MAC9BM,OAAO,EAAE,IAAIP,WAAW,CAAC,EAAE,EAAEE,UAAU,CAACM,QAAQ;KACjD,CAAC;EACJ;EAQAM,QAAQ;IACN,MAAMC,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;IACjD,IAAI,CAACZ,OAAO,CAACa,QAAQ,CAACC,OAAO,CAAEC,GAAG,IAAI;MACpC,IAAI,CAACC,SAAS,CAACC,IAAI,CAACC,IAAI,CAACC,SAAS,CAACJ,GAAG,CAAC,CAAC;IAC1C,CAAC,CAAC;IAEF,IAAIL,UAAU,KAAK,IAAI,EAAE;MACvB,IAAI,CAACU,MAAM,GAAGF,IAAI,CAACG,KAAK,CAACX,UAAU,CAAC;MACpC,IAAI,CAACY,OAAO,GAAG,IAAI,CAACF,MAAM,CAACG,MAAM;;IAEnC,IAAI,IAAI,CAACD,OAAO,GAAG,CAAC,EAAE;MACpB,IAAI,CAACE,OAAO,GAAG,IAAI;;IAGrB,IAAI,CAACC,SAAS,GAAGd,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EACpD;EAEAc,QAAQ;IACNC,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC3B,SAAS,CAAC4B,KAAK,CAAC;EACnC;EACAC,GAAG,CAACC,IAAS;IACXA,IAAI,CAACC,GAAG,IAAI,CAAC;IACbrB,YAAY,CAACsB,OAAO,CAAC,QAAQ,EAAEf,IAAI,CAACC,SAAS,CAACY,IAAI,CAAC,CAAC;IACpD,IAAIA,IAAI,CAACC,GAAG,IAAI,CAAC,EAAE;MACjBrB,YAAY,CAACuB,UAAU,CAAC,QAAQ,CAAC;;EAErC;EACAC,IAAI,CAACJ,IAAS;IACZA,IAAI,CAACC,GAAG,IAAI,CAAC;IACbrB,YAAY,CAACsB,OAAO,CAAC,QAAQ,EAAEf,IAAI,CAACC,SAAS,CAACY,IAAI,CAAC,CAAC;EACtD;CACD;AArDYjC,aAAa,eALzBJ,SAAS,CAAC;EACT0C,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,uBAAuB;EACpCC,SAAS,EAAE,CAAC,sBAAsB;CACnC,CAAC,GACWxC,aAAa,CAqDzB;SArDYA,aAAa","names":["Component","FormControl","FormGroup","Validators","CartComponent","constructor","service","firstForm","address","required","address2","city","state","postalCode","secondForm","ngOnInit","dishesData","localStorage","getItem","itemlist","forEach","obj","checklist","push","JSON","stringify","dishes","parse","dis_len","length","showbtn","resturant","onSubmit","console","log","value","des","item","qty","setItem","removeItem","incr","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\angular\\cloneZomato\\src\\app\\cart\\cart.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { MyserviceService } from '../myservice.service';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-cart',\n  templateUrl: './cart.component.html',\n  styleUrls: ['./cart.component.css'],\n})\nexport class CartComponent {\n  firstForm: FormGroup;\n  secondForm: FormGroup;\n  constructor(private service: MyserviceService) {\n    this.firstForm = new FormGroup({\n      address: new FormControl('', Validators.required),\n      address2: new FormControl('', Validators.required),\n      city: new FormControl('', Validators.required),\n      state: new FormControl('', Validators.required),\n      postalCode: new FormControl('', Validators.required),\n    });\n    this.secondForm = new FormGroup({\n      address: new FormControl('', Validators.required),\n    });\n  }\n  dishes: any[] = [];\n  dis_len: any;\n  showbtn: boolean = false;\n  resturant: any;\n  price: any;\n  checklist: any[] = [];\n  total = 0;\n  ngOnInit() {\n    const dishesData = localStorage.getItem('Dishes');\n    this.service.itemlist.forEach((obj) => {\n      this.checklist.push(JSON.stringify(obj));\n    });\n\n    if (dishesData !== null) {\n      this.dishes = JSON.parse(dishesData);\n      this.dis_len = this.dishes.length;\n    }\n    if (this.dis_len > 0) {\n      this.showbtn = true;\n    }\n\n    this.resturant = localStorage.getItem('resturant');\n  }\n\n  onSubmit() {\n    console.log(this.firstForm.value);\n  }\n  des(item: any) {\n    item.qty -= 1;\n    localStorage.setItem('Dishes', JSON.stringify(item));\n    if (item.qty == 0) {\n      localStorage.removeItem('Dishes');\n    }\n  }\n  incr(item: any) {\n    item.qty += 1;\n    localStorage.setItem('Dishes', JSON.stringify(item));\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}