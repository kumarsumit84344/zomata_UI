{"ast":null,"code":"import { DailogLoginComponent } from './dailog-login/dailog-login.component';\nimport { DailogSignupComponent } from './dailog-signup/dailog-signup.component';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nexport class MyserviceService {\n  constructor(dialog) {\n    this.dialog = dialog;\n    this.loginId = '';\n    this.cuser = false;\n    this.cpass = false;\n    this.dishes = [];\n    this.loginstatus = false;\n    this.data = new BehaviorSubject(false);\n    this.datachangeobservable = this.data.asObservable();\n    this.dataname = new BehaviorSubject('');\n    this.datanamechangeobservable = this.dataname.asObservable();\n  }\n  // checkData() {\n  //   this.data.next(this.loginstatus);\n  // }\n  getItem() {\n    this.dishes;\n  }\n  updatedata(bool) {\n    this.data.next(bool);\n  }\n  updatedataname(item) {\n    this.dataname.next(item);\n  }\n  check() {\n    this.loginId = localStorage.getItem('loginId');\n    this.signupId = localStorage.getItem('SignupId');\n    this.loginpass = localStorage.getItem('pass');\n    this.signuppass = localStorage.getItem('Signuppass');\n    this.user = localStorage.getItem('Name');\n    const user1 = this.user.replaceAll('\"', ' ');\n    this.userget = user1;\n    this.updatedataname(this.userget);\n    this.cuser = this.loginId === this.signupId;\n    this.cpass = this.loginpass === this.signuppass;\n    if ((this.cuser && this.cpass) == true) {\n      this.updatedata(true);\n    } else {\n      this.errormsg = 'wrong credential';\n      this.updatedata(false);\n    }\n  }\n  openDialog() {\n    this.dialog.open(DailogLoginComponent);\n  }\n  opensignupDialog() {\n    this.dialog.open(DailogSignupComponent);\n  }\n}\nMyserviceService.ɵfac = function MyserviceService_Factory(t) {\n  return new (t || MyserviceService)(i0.ɵɵinject(i1.MatDialog));\n};\nMyserviceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MyserviceService,\n  factory: MyserviceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAASA,oBAAoB,QAAQ,uCAAuC;AAC5E,SAASC,qBAAqB,QAAQ,yCAAyC;AAE/E,SAASC,eAAe,QAAoB,MAAM;;;AAKlD,OAAM,MAAOC,gBAAgB;EAa3BC,YAAmBC,MAAiB;IAAjB,WAAM,GAANA,MAAM;IAZzB,YAAO,GAAQ,EAAE;IAMjB,UAAK,GAAY,KAAK;IACtB,UAAK,GAAY,KAAK;IACtB,WAAM,GAAU,EAAE;IACV,gBAAW,GAAY,KAAK;IAKpC,SAAI,GAAG,IAAIH,eAAe,CAAM,KAAK,CAAC;IACtC,yBAAoB,GAAoB,IAAI,CAACI,IAAI,CAACC,YAAY,EAAE;IAChE,aAAQ,GAAG,IAAIL,eAAe,CAAM,EAAE,CAAC;IACvC,6BAAwB,GAAoB,IAAI,CAACM,QAAQ,CAACD,YAAY,EAAE;EALjC;EAOvC;EACA;EACA;EAEAE,OAAO;IACL,IAAI,CAACC,MAAM;EACb;EACAC,UAAU,CAACC,IAAa;IACtB,IAAI,CAACN,IAAI,CAACO,IAAI,CAACD,IAAI,CAAC;EACtB;EACAE,cAAc,CAACC,IAAS;IACtB,IAAI,CAACP,QAAQ,CAACK,IAAI,CAACE,IAAI,CAAC;EAC1B;EAEAC,KAAK;IACH,IAAI,CAACC,OAAO,GAAGC,YAAY,CAACT,OAAO,CAAC,SAAS,CAAC;IAC9C,IAAI,CAACU,QAAQ,GAAGD,YAAY,CAACT,OAAO,CAAC,UAAU,CAAC;IAChD,IAAI,CAACW,SAAS,GAAGF,YAAY,CAACT,OAAO,CAAC,MAAM,CAAC;IAC7C,IAAI,CAACY,UAAU,GAAGH,YAAY,CAACT,OAAO,CAAC,YAAY,CAAC;IACpD,IAAI,CAACa,IAAI,GAAGJ,YAAY,CAACT,OAAO,CAAC,MAAM,CAAC;IACxC,MAAMc,KAAK,GAAG,IAAI,CAACD,IAAI,CAACE,UAAU,CAAC,GAAG,EAAE,GAAG,CAAC;IAC5C,IAAI,CAACC,OAAO,GAAGF,KAAK;IACpB,IAAI,CAACT,cAAc,CAAC,IAAI,CAACW,OAAO,CAAC;IAEjC,IAAI,CAACC,KAAK,GAAG,IAAI,CAACT,OAAO,KAAK,IAAI,CAACE,QAAQ;IAC3C,IAAI,CAACQ,KAAK,GAAG,IAAI,CAACP,SAAS,KAAK,IAAI,CAACC,UAAU;IAE/C,IAAI,CAAC,IAAI,CAACK,KAAK,IAAI,IAAI,CAACC,KAAK,KAAK,IAAI,EAAE;MACtC,IAAI,CAAChB,UAAU,CAAC,IAAI,CAAC;KACtB,MAAM;MACL,IAAI,CAACiB,QAAQ,GAAG,kBAAkB;MAClC,IAAI,CAACjB,UAAU,CAAC,KAAK,CAAC;;EAE1B;EAEAkB,UAAU;IACR,IAAI,CAACxB,MAAM,CAACyB,IAAI,CAAC9B,oBAAoB,CAAC;EACxC;EACA+B,gBAAgB;IACd,IAAI,CAAC1B,MAAM,CAACyB,IAAI,CAAC7B,qBAAqB,CAAC;EACzC;;AA5DWE,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;SAAhBA,gBAAgB;EAAA6B,SAAhB7B,gBAAgB;EAAA8B,YAFf;AAAM","names":["DailogLoginComponent","DailogSignupComponent","BehaviorSubject","MyserviceService","constructor","dialog","data","asObservable","dataname","getItem","dishes","updatedata","bool","next","updatedataname","item","check","loginId","localStorage","signupId","loginpass","signuppass","user","user1","replaceAll","userget","cuser","cpass","errormsg","openDialog","open","opensignupDialog","factory","providedIn"],"sourceRoot":"","sources":["D:\\angular\\cloneZomato\\src\\app\\myservice.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { SocialAuthService } from '@abacritt/angularx-social-login';\nimport { MatDialog } from '@angular/material/dialog';\nimport { DailogLoginComponent } from './dailog-login/dailog-login.component';\nimport { DailogSignupComponent } from './dailog-signup/dailog-signup.component';\nimport { UpperCasePipe } from '@angular/common';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MyserviceService {\n  loginId: any = '';\n  signupId: any;\n  loginpass: any;\n  user: any;\n  userget: any;\n  signuppass: any;\n  cuser: boolean = false;\n  cpass: boolean = false;\n  dishes: any[] = [];\n  private loginstatus: boolean = false;\n  errormsg: any;\n\n  constructor(public dialog: MatDialog) {}\n\n  data = new BehaviorSubject<any>(false);\n  datachangeobservable: Observable<any> = this.data.asObservable();\n  dataname = new BehaviorSubject<any>('');\n  datanamechangeobservable: Observable<any> = this.dataname.asObservable();\n\n  // checkData() {\n  //   this.data.next(this.loginstatus);\n  // }\n\n  getItem() {\n    this.dishes\n  }\n  updatedata(bool: boolean) {\n    this.data.next(bool);\n  }\n  updatedataname(item: any) {\n    this.dataname.next(item);\n  }\n\n  check() {\n    this.loginId = localStorage.getItem('loginId');\n    this.signupId = localStorage.getItem('SignupId');\n    this.loginpass = localStorage.getItem('pass');\n    this.signuppass = localStorage.getItem('Signuppass');\n    this.user = localStorage.getItem('Name');\n    const user1 = this.user.replaceAll('\"', ' ');\n    this.userget = user1;\n    this.updatedataname(this.userget);\n\n    this.cuser = this.loginId === this.signupId;\n    this.cpass = this.loginpass === this.signuppass;\n\n    if ((this.cuser && this.cpass) == true) {\n      this.updatedata(true);\n    } else {\n      this.errormsg = 'wrong credential';\n      this.updatedata(false);\n    }\n  }\n\n  openDialog() {\n    this.dialog.open(DailogLoginComponent);\n  }\n  opensignupDialog() {\n    this.dialog.open(DailogSignupComponent);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}